import streamlit as st
import numpy as np
import librosa
import tensorflow as tf
import time
import scipy.signal as signal
import pyaudio
import os

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
SAMPLE_RATE = 22050  # ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á librosa
CHUNK = 1024         # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏≠‡∏£‡πå

# ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô
audio = pyaudio.PyAudio()
stream = audio.open(format=pyaudio.paFloat32, channels=1, rate=SAMPLE_RATE, 
                    input=True, frames_per_buffer=CHUNK)

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
if 'model' not in st.session_state:
    st.session_state.model = tf.keras.models.load_model("C:/Users/M S I/Documents/GitHub/AutoPitch/PerfectPitch2/MelNoteClassifierV6.h5")  # ‡∏£‡∏∞‡∏ö‡∏∏ path ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á MIDI ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ô‡πâ‡∏ï
def midi_to_note(midi):
    note_names = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]
    octave = midi // 12 - 1
    note = note_names[midi % 12]
    return f"{note}{octave}"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Noise Gate ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏≤‡∏Å‡∏ß‡πà‡∏≤ threshold
def noise_gate(audio_data, threshold=0.02):
    return np.where(np.abs(audio_data) >= threshold, audio_data, 0)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Bandpass Filter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
def bandpass_filter(audio_data, low_cutoff=90, high_cutoff=8000, sample_rate=22050, order=3):
    nyquist = 0.5 * sample_rate
    low = low_cutoff / nyquist
    high = high_cutoff / nyquist
    b, a = signal.butter(order, [low, high], btype='band')
    filtered_audio = signal.filtfilt(b, a, audio_data)
    return filtered_audio

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡∏Ñ‡πå‡πÄ‡∏õ‡πá‡∏ô Mel spectrogram
def get_mel_from_audio():
    try:
        audio_data = np.frombuffer(stream.read(CHUNK, exception_on_overflow=False), dtype=np.float32)
        
        # ‡πÉ‡∏ä‡πâ Noise Gate ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ö‡∏≤
        gated_audio = noise_gate(audio_data, threshold=0.02)
        
        # ‡πÉ‡∏ä‡πâ Bandpass Filter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        filtered_audio = bandpass_filter(gated_audio, low_cutoff=90, high_cutoff=8000, sample_rate=SAMPLE_RATE, order=3)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô (RMS energy)
        energy = np.mean(np.abs(filtered_audio))
        silence_threshold = 0.005
        if energy < silence_threshold:
            return None
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Mel spectrogram ‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏î noise ‡πÅ‡∏•‡πâ‡∏ß
        mel = librosa.feature.melspectrogram(y=filtered_audio, sr=SAMPLE_RATE, n_mels=128, fmax=8000)
        return mel
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {e}")
        return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏ô‡πâ‡∏ï‡∏à‡∏≤‡∏Å Mel spectrogram
def predict_note():
    mel_input = get_mel_from_audio()
    if mel_input is None:
        return None  # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏á‡∏µ‡∏¢‡∏ö
    
    mel_input_resized = np.pad(mel_input, ((0, 0), (0, 128 - mel_input.shape[1])), 'constant')
    mel_input_resized = np.reshape(mel_input_resized, (1, 128, 128, 1))
    
    predicted = st.session_state.model.predict(mel_input_resized)
    predicted_midi = np.argmax(predicted)
    predicted_note_name = midi_to_note(predicted_midi)
    
    return predicted_note_name

# ‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÉ‡∏ô Streamlit
st.title("üéµ Real-time Note Detection")
st.write("‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏ô‡πâ‡∏ï‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á placeholder ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏ô‡πâ‡∏ï
note_placeholder = st.empty()

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
if 'is_recording' not in st.session_state:
    st.session_state.is_recording = False

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
def toggle_recording():
    st.session_state.is_recording = not st.session_state.is_recording

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô path ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
background_path = "C:/Users/M S I/Desktop/PerfectPitch2/noisy-grid.png"  # ‡∏£‡∏∞‡∏ö‡∏∏ path ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
if os.path.exists(background_path):
    background_url = f'file://{os.path.abspath(background_path)}'
else:
    background_url = "https://www.transparenttextures.com/patterns/minimalist-lattice.png"  # ‡πÉ‡∏ä‡πâ URL ‡∏™‡∏≥‡∏£‡∏≠‡∏á

st.markdown(f"""
    <style>
        /* ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ò‡∏µ‡∏°‡∏°‡∏∑‡∏î */
        body {{
            background-color: #121212 !important;
            color: #E0E0E0 !important;
            font-family: 'Arial', sans-serif;
        }}

        /* ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á */
        .stButton>button {{
            background-color: #FF6347;  /* ‡∏™‡∏µ‡πÅ‡∏î‡∏á */
            color: white;  /* ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß */
            border: none;
            border-radius: 10px;
            padding: 15px 30px;
            font-size: 18px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
            transition: background-color 0.3s ease;
        }}
        .stButton>button:hover {{
            background-color: #FF4500;  /* ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover */
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.7);  /* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏≤ */
        }}

        /* ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏ô‡πâ‡∏ï ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏î‡∏≥ */
        .note-box {{
            text-align: center;
            border: 2px solid #BB86FC;
            padding: 20px;
            border-radius: 10px;
            background-color: #333333;
            font-size: 24px;
            font-weight: bold;
            color: #000000;  /* ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏™‡∏µ‡∏î‡∏≥ */
            transition: background-color 0.3s ease;
        }}

        /* ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á */
        .note-box.sound {{
            background-color: #03DAC5;
            border-color: #018786;
            color: #018786;
        }}
        /* ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á */
        .note-box.silence {{
            background-color: #6200EE;
            border-color: #3700B3;
            color: #BB86FC;
        }}

        /* ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á */
        .stButton {{
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
        }}
    </style>
""", unsafe_allow_html=True)



# ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á X
if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á", on_click=toggle_recording):
    if st.session_state.is_recording:
        st.write("üé§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á...")
    else:
        st.write("üé§ ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á")

# ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
if st.session_state.is_recording:
    try:
        while True:
            note_pred = predict_note()
            if note_pred is not None:
                # ‡πÉ‡∏ä‡πâ st.markdown ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πÑ‡∏ï‡∏•‡πå CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
                note_placeholder.markdown(f"""
                <div style="text-align: center;">
                    <div style="border: 2px solid #BB86FC; padding: 20px; border-radius: 10px; background-color: #333333; color: #FFFFFF;">
                        üé∂ ‡πÇ‡∏ô‡πâ‡∏ï‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ: <strong>{note_pred}</strong>
                    </div>
                </div>
                """, unsafe_allow_html=True)
            else:
                note_placeholder.markdown("""
                <div style="text-align: center;">
                    <div style="border: 2px solid #BB86FC; padding: 20px; border-radius: 10px; background-color: #333333; color: #FFFFFF;">
                        üîá ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏ô‡πâ‡∏ï‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ
                    </div>
                </div>
                """, unsafe_allow_html=True)

            time.sleep(0.05)  # ‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    except KeyboardInterrupt:
        st.write("üî¥ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        stream.stop_stream()
        stream.close()
        audio.terminate()
# ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
else:
    note_placeholder.markdown("""
    <div style="text-align: center;">
        <div style="border: 2px solid black; padding: 20px; border-radius: 10px; background-color: #f0f0f0;">
            üé§ ‡∏•‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏î‡∏π‡∏™‡∏¥‡∏â‡∏±‡∏ô‡∏à‡∏∞‡∏ó‡∏≤‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÇ‡∏ô‡πä‡∏ï‡∏î‡∏π!!
        </div>
    </div>
    """, unsafe_allow_html=True)
